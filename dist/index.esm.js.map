{"version":3,"file":"index.esm.js","sources":["../src/config/ConfigService.ts","../src/config/ModeService.ts","../src/reporting/ReportService.ts","../src/directives/DirectiveParserService.ts","../src/guard/GuardService.ts","../src/mime-type/MimeTypeService.ts","../src/directives/DirectiveService.ts","../src/directives/DirectiveRegexService.ts","../src/CspConsoleGuardService.ts","../src/document-parser/MetaTagService.ts","../src/directives/HtmlElementService.ts","../src/guard/HtmlGuardService.ts","../src/router/RouterService.ts"],"sourcesContent":["export type Config = {\n    policies: { pathRegex: string; value: string }[];\n    reportUri: string;\n    mode: 'enforce' | 'reportOnly';\n    debug?: boolean;\n};\n\nlet appConfig: Config | null = null;\nconst MISSING_CONFIG_ERROR = \"Config has not been initialized.\";\n\nexport function initConfig(initialConfig: Config): void {\n    if (appConfig) {\n        throw new Error(\"Config has already been initialized.\");\n    }\n    appConfig = Object.freeze({ ...initialConfig });\n}\n\nexport function getPolicies(): Config['policies'] {\n    if (!appConfig) {\n        throw new Error(MISSING_CONFIG_ERROR);\n    }\n\n    return appConfig.policies;\n}\n\nexport function getCspMode(): Config['mode'] {\n    if (!appConfig) {\n        throw new Error(MISSING_CONFIG_ERROR);\n    }\n\n    return appConfig.mode;\n}\n\nexport function getReportUri(): Config['reportUri'] {\n    if (!appConfig) {\n        throw new Error(MISSING_CONFIG_ERROR);\n    }\n\n    return appConfig.reportUri;\n}\n\nexport function shouldUseDebugMode(): Config['debug']{\n    if (!appConfig) {\n        throw new Error(MISSING_CONFIG_ERROR);\n    }\n\n    return appConfig.debug;\n}\n","import { getCspMode } from \"./ConfigService\";\n\nexport function shouldUseEnforceMode(): boolean {\n    return getCspMode() === 'enforce';\n}\n\nexport function shouldUseReportOnlyMode(): boolean {\n    return getCspMode() === 'reportOnly';\n}\n","import { Config, getCspMode, getReportUri, shouldUseDebugMode } from \"../config/ConfigService\";\n\ntype ApiReportPayload = {\n    'blocked-uri': string;\n    disposition: Config['mode'];\n    'document-uri': string;\n    'effective-directive': string;\n    'original-policy': string;\n    referrer: string;\n    'status-code': number;\n    'violated-directive': string;\n}\n\nfunction sendReportToApi(data: ApiReportPayload): void {\n    fetch(getReportUri(), {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ 'csp-report': data })\n    })\n        .then(response => response.json())\n        .then(data => {\n            console.log('Success:', data);\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n}\n\nexport function reportViolation({\n    directive,\n    blockedUri,\n    documentUrl,\n    originalPolicy,\n    referrer,\n    statusCode\n}: {\n    directive: string;\n    blockedUri: string;\n    documentUrl: string;\n    originalPolicy: string;\n    referrer?: string;\n    statusCode?: number;\n}) {\n    const data = {\n        \"blocked-uri\": blockedUri,\n        \"disposition\": getCspMode(),\n        \"document-uri\": documentUrl,\n        \"effective-directive\": directive,\n        \"original-policy\": originalPolicy,\n        \"referrer\": referrer ?? '',\n        \"status-code\": statusCode ?? 200,\n        \"violated-directive\": directive\n    };\n\n    if (shouldUseDebugMode()) {\n        console.log('Violation report', data);\n        return;\n    }\n\n    sendReportToApi(data);\n}\n","function extractCSPDirective(cspHeader: string, directive: string): string | null {\n    const directives = cspHeader.split(';').map(d => d.trim());\n\n    for (const entry of directives) {\n        const entryDirective = entry.split(' ')[0];\n        if (entryDirective === directive) {\n            return entry.slice(directive.length).trim();\n        }\n    }\n\n    return null;\n}\n\nexport function getPoliciesByDirective(cspHeader: string, directive: string): string | null {\n    const extractedCSPDirective = extractCSPDirective(cspHeader, directive);\n\n    if (!extractedCSPDirective) {\n        return null;\n    }\n\n    return `${directive} ${extractedCSPDirective};`;\n}\n\nexport function getAllCspDirectivesByType({ cspHeader, type, selfReplacementUrl }: {cspHeader: string; type: string; selfReplacementUrl?: string;}): string[] {\n    const selfReplacements = [\n        selfReplacementUrl ?? location.origin\n    ];\n\n    if (cspHeader.indexOf(type) < 0) {\n        return [];\n    }\n\n    const cspDirective = extractCSPDirective(cspHeader, type);\n\n    if (!cspDirective) {\n        return [];\n    }\n\n    const cspDirectives = cspDirective.split(' ').filter(val => val.length > 0).map(val => val.replace(/'/g, \"\"));\n\n    return cspDirectives.flatMap(value => value === 'self' ? selfReplacements : value);\n}\n","import { shouldUseReportOnlyMode } from \"../config/ModeService\";\nimport { reportViolation } from \"../reporting/ReportService\";\nimport { getPoliciesByDirective } from \"../directives/DirectiveParserService\";\n\nexport function cspWebGuard(): void {\n    if (shouldUseReportOnlyMode()) {\n        return;\n    }\n\n    window.addEventListener('securitypolicyviolation', function(event) {\n        const directive = event.effectiveDirective ?? event.violatedDirective;\n\n        reportViolation({\n            directive,\n            blockedUri: event.blockedURI,\n            documentUrl: event.documentURI,\n            originalPolicy: getPoliciesByDirective(event.originalPolicy, directive)!,\n            referrer: event.referrer,\n            statusCode: event.statusCode\n        });\n    });\n}\n","import { CspDirective } from \"../directives/DirectiveService\";\n\ntype MimeTypeToDirectivesMap = {\n    [mimeType: string]: CspDirective[];\n};\n\nexport function guessMimeTypeFromUrl(url: string): string {\n    const extension = url.split('.').pop()?.split('?')[0].toLowerCase();\n\n    if (!extension) {\n        return 'application/octet-stream';\n    }\n\n    return {\n        js: 'text/javascript',\n        css: 'text/css',\n        html: 'text/html',\n        json: 'application/json',\n        png: 'image/png',\n        jpg: 'image/jpeg',\n        jpeg: 'image/jpeg',\n        gif: 'image/gif',\n        svg: 'image/svg+xml',\n        ico: 'image/x-icon',\n        wasm: 'application/wasm',\n    }[extension] || 'application/octet-stream';\n}\n\nexport function getCspDirectivesForMimeType(mimeType: string): CspDirective[] {\n    const mimeToDirectives: MimeTypeToDirectivesMap = {\n        // Scripts\n        'application/javascript': ['script-src', 'script-src-elem', 'script-src-attr'],\n        'application/x-javascript': ['script-src', 'script-src-elem', 'script-src-attr'],\n        'text/javascript': ['script-src', 'script-src-elem', 'script-src-attr'],\n        'application/ecmascript': ['script-src', 'script-src-elem', 'script-src-attr'],\n        'text/ecmascript': ['script-src', 'script-src-elem', 'script-src-attr'],\n\n        // Stylesheets\n        'text/css': ['style-src', 'style-src-elem', 'style-src-attr'],\n\n        // Images\n        'image/png': ['img-src'],\n        'image/jpeg': ['img-src'],\n        'image/jpg': ['img-src'],\n        'image/gif': ['img-src'],\n        'image/webp': ['img-src'],\n        'image/svg+xml': ['img-src'],\n        'image/x-icon': ['img-src'],\n\n        // Fonts\n        'font/woff': ['font-src'],\n        'font/woff2': ['font-src'],\n        'application/font-woff': ['font-src'],\n        'application/font-woff2': ['font-src'],\n        'application/vnd.ms-fontobject': ['font-src'],\n        'font/ttf': ['font-src'],\n        'font/otf': ['font-src'],\n\n        // Media\n        'audio/mpeg': ['media-src'],\n        'audio/ogg': ['media-src'],\n        'audio/wav': ['media-src'],\n        'video/mp4': ['media-src'],\n        'video/webm': ['media-src'],\n        'video/ogg': ['media-src'],\n\n        // HTML documents\n        'text/html': ['frame-src', 'child-src', 'default-src'],\n\n        // JSON / data APIs\n        'application/json': ['connect-src', 'default-src'],\n        'application/xml': ['connect-src', 'default-src'],\n        'text/xml': ['connect-src', 'default-src'],\n\n        // WebAssembly\n        'application/wasm': ['script-src'],\n\n        // Others\n        'application/pdf': ['object-src'],\n        'application/octet-stream': ['object-src'],\n    };\n\n    return mimeToDirectives[mimeType] || [];\n}\n","export type CspDirective =\n    | 'default-src'\n    | 'script-src'\n    | 'script-src-elem'\n    | 'script-src-attr'\n    | 'style-src'\n    | 'style-src-elem'\n    | 'style-src-attr'\n    | 'img-src'\n    | 'font-src'\n    | 'media-src'\n    | 'connect-src'\n    | 'frame-src'\n    | 'child-src'\n    | 'object-src';\n\nexport function isUnsafeInline(directiveValue: string): boolean {\n    return directiveValue === 'unsafe-inline';\n}\n\ntype RouteMatch = { pathRegex: string; value: string };\n\nexport function getCspConfigByRoute(routes: RouteMatch[], currentUrl: string): string | undefined {\n\n    for (const { pathRegex, value } of routes) {\n        if (new RegExp(pathRegex).test(currentUrl)) {\n            return value;\n        }\n    }\n\n    return undefined;\n}\n\nexport function hasRouteCspConfig(routes: RouteMatch[], currentUrl: string): boolean {\n    return !!getCspConfigByRoute(routes, currentUrl);\n}\n","export function normalizeCspDirectiveValue(value:string): string {\n    return value.replace('*', '[^\\.]+');\n}\n\nexport function isUrlAllowedByDirectiveValue(value: string, url: string): boolean {\n    return new RegExp('^' + value).test(url);\n}\n","import { Config, getPolicies, initConfig } from \"./config/ConfigService\";\nimport { cspWebGuard } from \"./guard/GuardService\";\nimport { shouldUseEnforceMode } from \"./config/ModeService\";\nimport { getCspDirectivesForMimeType, guessMimeTypeFromUrl } from \"./mime-type/MimeTypeService\";\nimport { getCspConfigByRoute } from \"./directives/DirectiveService\";\nimport {\n    getAllCspDirectivesByType,\n    getPoliciesByDirective\n} from \"./directives/DirectiveParserService\";\nimport { isUrlAllowedByDirectiveValue, normalizeCspDirectiveValue } from \"./directives/DirectiveRegexService\";\nimport { reportViolation } from \"./reporting/ReportService\";\n\ntype GuardConfig = Config & {\n    onGuardInit?(): void;\n};\n\nexport function cspConsoleWebGuard({ onGuardInit, policies, mode, reportUri, debug }: GuardConfig): void {\n    initConfig({ policies, mode, reportUri, debug });\n\n    if (shouldUseEnforceMode()) {\n        cspWebGuard();\n        onGuardInit?.();\n        return;\n    }\n\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register('/service-worker.js')\n            .then(() => {\n                // cspWebGuard();\n                onGuardInit?.();\n            }).catch((error) => {\n            console.log('Service Worker registration failed:', error);\n        });\n\n        navigator.serviceWorker.addEventListener('message', (event) => {\n            if (event.data?.type === 'ASSET_FETCHED') {\n                const normalizedData = {\n                    ...event.data,\n                    contentType: event.data?.contentType ?? guessMimeTypeFromUrl(event.data?.url)\n                };\n\n                const directives = getCspConfigByRoute(getPolicies(), window.location.href);\n\n                if (!directives) {\n                    return;\n                }\n\n                const directivesBasedOnMimeType = getCspDirectivesForMimeType(normalizedData.contentType);\n                directivesBasedOnMimeType.forEach((mimeTypeBasedCspDirective) => {\n                    const values = getAllCspDirectivesByType({ cspHeader: directives, type: mimeTypeBasedCspDirective });\n\n                    for (const value of values) {\n                        const normalizedValue = normalizeCspDirectiveValue(value);\n\n                        if (!isUrlAllowedByDirectiveValue(normalizedValue, normalizedData.url)) {\n                            reportViolation({\n                                directive: mimeTypeBasedCspDirective,\n                                blockedUri: normalizedData.url,\n                                originalPolicy: getPoliciesByDirective(directives, mimeTypeBasedCspDirective)!,\n                                documentUrl: window.location.href,\n                                statusCode: normalizedData.status\n                            });\n                            return;\n                        }\n                    }\n                });\n\n            }\n        });\n    }\n}\n","export function getMetaTag(html: Document): HTMLMetaElement | null {\n    return html.querySelector('meta[http-equiv=\"content-security-policy\"]');\n}\n\nexport function getCspValueFromMetaTag(html: Document): string | undefined {\n    const meta = getMetaTag(html);\n\n    return meta?.content;\n}\n\nexport function updateCspMetaTagInDocument(html: Document, cspDirective: string): Document {\n    const metaTag = getMetaTag(html);\n\n    if (!metaTag) {\n        const meta = html.createElement('meta');\n        meta.setAttribute('http-equiv', 'content-security-policy');\n        meta.setAttribute('content', cspDirective);\n        \n        html.head.appendChild(meta);\n\n        return html;\n    }\n\n    metaTag?.setAttribute('content', cspDirective);\n\n    return html;\n}\n","export function hasElementSrc<T extends Element>(element: T): element is T & { src: string } {\n    return !!element.getAttribute('src');\n}\n\nexport function hasElementHref<T extends Element>(element: T): element is T & { href: string } {\n    return !!element.getAttribute('href');\n}\n\nexport function isElementWithNonceAndSrc(element :Element): boolean  {\n    const nonce = element.getAttribute('nonce');\n\n    if (!nonce) {\n        return false;\n    }\n\n    return hasElementSrc(element);\n}\n\nexport function isElementDataCspSrc<T extends Element>( element: T): element is T & { 'data-csp-src': string } {\n    return element.getAttribute('data-csp-attr') === 'src';\n}\n\nexport function isElementDataCspHref<T extends Element>( element: T): element is T & { 'data-csp-href': string } {\n    return element.getAttribute('data-csp-attr') === 'href';\n}\n\nexport function isElementDataCspResult<T extends Element>(element: T): element is T & { 'data-csp-elem': string } {\n    return !!element.getAttribute('data-csp-result');\n}\n\nexport function isElementScriptOrStyle(element: Element): element is HTMLScriptElement | HTMLStyleElement {\n    return element.tagName.toLowerCase() === 'script' || element.tagName.toLowerCase() === 'style';\n}\n\nexport function isNonceMatchingDirectiveValue({ element, directiveValue }: {element: Element; directiveValue: string}): boolean {\n    return element.getAttribute('nonce') === directiveValue.replace('nonce-', '');\n}\n\nfunction isElementAttrMatchingDirectiveRegex({\n    element,\n    attrName,\n    regex,\n}: {\n    element: Element;\n    attrName: string;\n    regex: string;\n}): boolean {\n    if (regex === '*') {\n        return true;\n    }\n\n    try {\n        const rawAttr = element.getAttribute(attrName);\n        if (!rawAttr) {\n            return false;\n        }\n\n        const resolvedUrl = new URL(rawAttr, document.baseURI).href;\n        return new RegExp(regex).test(resolvedUrl);\n    } catch {\n        return false;\n    }\n}\n\nexport function isSrcElementMatchingDirectiveValueRegex({ element, regex }:{element: Element; regex: string}) : boolean {\n    if (!hasElementSrc(element)) {\n        return false;\n    }\n\n    return isElementAttrMatchingDirectiveRegex({ element, attrName: 'src', regex });\n}\n\nexport function isCspDataSrcElementMatchingDirectiveValueRegex({ element, regex }:{element: Element; regex: string}) : boolean {\n    if (!isElementDataCspSrc(element)) {\n        return false;\n    }\n\n    let attribute = element.getAttribute('data-csp-src');\n\n    if (!attribute) {\n        return false;\n    }\n\n    return isElementAttrMatchingDirectiveRegex({ element, attrName: 'data-csp-src', regex });\n}\n\nexport function isHrefElementMatchingDirectiveValueRegex({ element, regex }:{element: Element; regex: string}) : boolean {\n    if (!hasElementHref(element)) {\n        return false;\n    }\n\n    return isElementAttrMatchingDirectiveRegex({ element, attrName: 'href', regex });\n}\n\nexport function isCspDataHrefElementMatchingDirectiveValueRegex({ element, regex }:{element: Element; regex: string}) : boolean {\n    if (!isElementDataCspHref(element)) {\n        return false;\n    }\n\n    let attribute = element.getAttribute('data-csp-src');\n\n    if (!attribute) {\n        return false;\n    }\n\n    return isElementAttrMatchingDirectiveRegex({ element, attrName: 'data-csp-href', regex });\n}\n","import { getAllCspDirectivesByType } from \"../directives/DirectiveParserService\";\nimport {\n    hasElementHref,\n    hasElementSrc,\n    isCspDataHrefElementMatchingDirectiveValueRegex,\n    isCspDataSrcElementMatchingDirectiveValueRegex,\n    isElementDataCspResult,\n    isElementDataCspHref,\n    isElementDataCspSrc,\n    isElementScriptOrStyle,\n    isElementWithNonceAndSrc,\n    isHrefElementMatchingDirectiveValueRegex,\n    isNonceMatchingDirectiveValue,\n    isSrcElementMatchingDirectiveValueRegex\n} from \"../directives/HtmlElementService\";\nimport { isUnsafeInline } from \"../directives/DirectiveService\";\n\nconst HTML_ELEMENTS = {\n    'script': 'script-src',\n    'style': 'style-src',\n    'link[rel=\"stylesheet\"]': 'style-src',\n    'img': 'img-src',\n    'iframe': 'frame-src',\n};\n\nfunction blockSrcElement(element: Element): void {\n    if (!hasElementSrc(element)) {\n        return;\n    }\n\n    if (isElementDataCspSrc(element)) {\n        return;\n    }\n\n    element.setAttribute('data-csp-src', element.src);\n    element.setAttribute('data-csp-attr', 'src');\n    element.removeAttribute('src');\n    addDataCspResultAttribute(element);\n}\n\nfunction unlockSrcElement(element: Element): void {\n    if (!isElementDataCspSrc(element)) {\n        return;\n    }\n\n    element.setAttribute('src', element.getAttribute('data-csp-src')!);\n    removeDataCspAttributes(element);\n}\n\nfunction blockHrefElement(element: Element): void {\n    if (!hasElementHref(element)) {\n        return;\n    }\n\n    if (isElementDataCspHref(element)) {\n        return;\n    }\n\n    element.setAttribute('data-csp-src', element.href);\n    element.setAttribute('data-csp-attr', 'href');\n    element.removeAttribute('href');\n    addDataCspResultAttribute(element);\n}\n\nfunction unlockHrefElement(element: Element): void {\n    if (!isElementDataCspHref(element)) {\n        return;\n    }\n\n    element.setAttribute('href', element.getAttribute('data-csp-src')!);\n    removeDataCspAttributes(element);\n}\n\nfunction addDataCspResultAttribute(element: Element): void {\n    element.setAttribute('data-csp-result', 'disabled');\n}\n\nfunction removeDataCspAttributes(element: Element): void {\n    element.removeAttribute('data-csp-src');\n    element.removeAttribute('data-csp-attr');\n    element.removeAttribute('data-csp-result');\n}\n\nfunction blockUnsafeInline(element: Element): void {\n    if (isElementDataCspResult(element)) {\n        return;\n    }\n\n    element.setAttribute('data-csp-result', 'disabled');\n    element.innerHTML = '/*' + element.innerHTML + '*/';\n}\n\nfunction unlockUnsafeInline(element: Element): void {\n    if (!isElementDataCspResult(element)) {\n        return;\n    }\n\n    element.removeAttribute('data-csp-result');\n    element.innerHTML = element.innerHTML.trim().replace(/^\\/\\*/, '').replace(/\\*\\/$/, '');\n}\n\nfunction guardHtmlElement(element: Element, values: string[]): void {\n    if (isElementWithNonceAndSrc(element)) {\n        let isMatchingNonce = false;\n        values.forEach((value) => {\n            if (isNonceMatchingDirectiveValue({ element, directiveValue: value })) {\n                isMatchingNonce = true;\n            }\n        });\n\n        if (isMatchingNonce) {\n            if (isElementDataCspResult(element)) {\n                unlockSrcElement(element);\n                return;\n            }\n        } else {\n            blockSrcElement(element);\n            return;\n        }\n    }\n\n    if (hasElementSrc(element)) {\n        let isMatchingSrc = false;\n        values.forEach((value) => {\n            if (isSrcElementMatchingDirectiveValueRegex({ element, regex: value })) {\n                isMatchingSrc = true;\n            }\n        });\n\n        if (isMatchingSrc) {\n            if (isElementDataCspResult(element)) {\n                unlockSrcElement(element);\n                return;\n            }\n        } else {\n            blockSrcElement(element);\n            return;\n        }\n    }\n\n    if (isElementDataCspSrc(element)) {\n        let isMatchingDataSrc = false;\n\n        values.forEach((value) => {\n            if (isCspDataSrcElementMatchingDirectiveValueRegex({ element, regex: value })) {\n                isMatchingDataSrc = true;\n            }\n        });\n\n        if (isMatchingDataSrc){\n            if (isElementDataCspResult(element)) {\n                unlockSrcElement(element);\n                return;\n            }\n        } else {\n            blockSrcElement(element);\n            return;\n        }\n    }\n\n    if (hasElementHref(element)) {\n        let isMatchingHref = false;\n        values.forEach((value) => {\n            if (isHrefElementMatchingDirectiveValueRegex({ element, regex: value })) {\n                isMatchingHref = true;\n            }\n        });\n        if (isMatchingHref) {\n            if (isElementDataCspResult(element)) {\n                unlockHrefElement(element);\n                return;\n            }\n        } else {\n            blockHrefElement(element);\n            return;\n        }\n    }\n\n    if (isElementDataCspHref(element)) {\n        let isMatchingDataHref = false;\n        values.forEach((value) => {\n            if (isCspDataHrefElementMatchingDirectiveValueRegex({ element, regex: value })) {\n                isMatchingDataHref = true;\n            }\n        });\n        if (isMatchingDataHref) {\n            if (isElementDataCspResult(element)) {\n             unlockHrefElement(element);\n             return;\n            }\n        } else {\n            blockHrefElement(element);\n            return;\n        }\n    }\n\n    if (isElementScriptOrStyle(element)) {\n        if (hasElementSrc(element) || hasElementHref(element)) {\n            return;\n        }\n\n        const isUnsafeInlineAllowed = values.some((value) => isUnsafeInline(value));\n\n        if (isUnsafeInlineAllowed) {\n            unlockUnsafeInline(element);\n            return;\n        }\n\n        blockUnsafeInline(element);\n    }\n}\n\nexport function htmlGuard({ html = document, allowedDirectives, selfReplacementUrl }: {\n    html: Document;\n    allowedDirectives: string | undefined;\n    selfReplacementUrl?: string\n}): void {\n    if (!allowedDirectives) {\n        return;\n    }\n\n    Object.entries(HTML_ELEMENTS).forEach(([htmlTagName, directive]) => {\n        const htmlElements = html.querySelectorAll(htmlTagName);\n        const values = getAllCspDirectivesByType({ cspHeader: allowedDirectives, type: directive, selfReplacementUrl });\n\n        for (const element of htmlElements) {\n            guardHtmlElement(element, values);\n       }\n    });\n}\n","import { getCspConfigByRoute } from \"../directives/DirectiveService\";\nimport { updateCspMetaTagInDocument } from \"../document-parser/MetaTagService\";\nimport { getPolicies } from \"../config/ConfigService\";\nimport { shouldUseReportOnlyMode } from \"../config/ModeService\";\nimport { htmlGuard } from \"../guard/HtmlGuardService\";\n\nexport function cspConsoleRouteGuard(currentUrl: string): void {\n    if (shouldUseReportOnlyMode()) {\n        return;\n    }\n    \n    const directives = getCspConfigByRoute(getPolicies(), currentUrl);\n    updateCspMetaTagInDocument(document, directives ?? '');\n    htmlGuard({ html: document, allowedDirectives: directives });\n}\n"],"names":[],"mappings":"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"}